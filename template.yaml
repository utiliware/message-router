AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Messages between services using API Gateway, Lambda, SQS, EventBridge, SNS, DynamoDB and S3 with monitoring via CloudWatch and X-Ray

Parameters:
  MessageQueueName:
    Type: String
    Default: MyMessageQueue
  QueueTwoName:
    Type: String
    Default: message-router-queue-2
  QueueTwoDLQName:
    Type: String
    Default: message-router-queue-2-dlq
  SNSTopicName:
    Type: String
    Default: MyTargetTopic
  MessagesTableName:
    Type: String
    Default: MessagesTable
  S3BucketName:
    Type: String
    Default: target-bucket

Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
    Layers:
      - !Ref CommonDependenciesLayer
  Api:
    TracingEnabled: true

Resources:

  # --- Layer with dependencies ---
  CommonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.12

  # --- API Gateway with CORS ---
  MessageApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # --- SQS Queue (API -> SQS1) ---
  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref MessageQueueName

  # --- Lambda messgae router queue: API -> SQS ---
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/message_router_queue/
      Handler: app.lambda_handler
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL: !Ref MessageQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MessageQueue.QueueName
        - AWSXRayDaemonWriteAccess
      Events:
        ApiPost:
          Type: Api
          Properties:
            Path: /send
            Method: post
            RestApiId: !Ref MessageApi

  # --- Lambda Dispatcher: SQS1 -> EventBridge ---
  LambdaDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/lambda_dispatcher/
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
      Environment:
        Variables:
          EVENT_BUS_NAME: default
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt MessageQueue.QueueName
        - Statement:
            Effect: Allow
            Action:
              - events:PutEvents
            Resource: !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default"
        - AWSXRayDaemonWriteAccess
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageQueue.Arn
            BatchSize: 1

  # --- EventBridge Rule 1: messages from LambdaDispatcher -> EBToSQS2Function ---
  MessageReceivedRule:
    Type: AWS::Events::Rule
    Properties:
      Name: MessageReceivedRule
      Description: "Regla para capturar eventos emitidos por LambdaDispatcher"
      EventPattern:
        source:
          - my.app.messages
        detail-type:
          - MessageReceived
      Targets:
        - Arn: !GetAtt EBToSQS2Function.Arn
          Id: "EBToSQS2LambdaTarget"

  # Permission for EventBridge to invoke EBToSQS2Function
  PermissionForEventsInvokeEBToSQS2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EBToSQS2Function
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MessageReceivedRule.Arn

  # --- Lambda: EventBridge Rule 1 -> SQS 2 ---
  EBToSQS2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/eb_to_sqs2/
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueTwo
      Policies:
        - Statement:
            Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt QueueTwo.Arn
        - AWSXRayDaemonWriteAccess

  # -- SQS 2 and DLQ ---
  QueueTwoDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueTwoDLQName

  QueueTwo:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref QueueTwoName
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueueTwoDLQ.Arn
        maxReceiveCount: 5

  # --- IAM Role para Step Functions (ejecución) ---
  StepFunctionsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: StepFunctionsLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                  - logs:PutDestination
                  - logs:PutDestinationPolicy
                  - logs:AssociateKmsKey
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/vendedlogs/states/${AWS::StackName}-MyStateMachine:*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: "*"
        - PolicyName: StepFunctionsExecutionBase
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # LogGroup para los logs de Step Functions (CloudWatch)
  MyStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}-MyStateMachine"
      RetentionInDays: 14

  # State Machine
  MyStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionsExecutionRole.Arn
      TracingConfiguration:
        Enabled: true
      LoggingConfiguration:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt MyStateMachineLogGroup.Arn
      DefinitionString: |
        {
          "Comment": "State machine mínima para pipeline preservando input",
          "StartAt": "PassState",
          "States": {
            "PassState": {
              "Type": "Pass",
              "Result": {"status":"ok"},
              "ResultPath": "$.status",
              "End": true
            }
          }
        }

  # --- Lambda: SQS 2 -> Step Functions ---
  SQS2ToStepFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/sqs2_to_stepfn/
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueTwo
          STATE_MACHINE_ARN: !Ref MyStateMachine
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - AWSXRayDaemonWriteAccess
        - Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: !Ref MyStateMachine
      Events:
        FromSQS2:
          Type: SQS
          Properties:
            Queue: !GetAtt QueueTwo.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 0

  # --- EventBridge: Rule 2 -> SNS ---
  StepFnOutputsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StepFnOutputsRule
      Description: "Captura cambios de estado del Step Functions (SUCCEEDED/FAILED) y los envía a SNS"
      EventPattern:
        source:
          - aws.states
        detail-type:
          - Step Functions Execution Status Change
        detail:
          stateMachineArn:
            - !Ref MyStateMachine
          status:
            - SUCCEEDED
            - FAILED
      Targets:
        - Arn: !Ref MySNSTopic
          Id: "SnsTargetForStepFnOutputs"

  EventBridgeToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref MySNSTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowEventBridgeToPublish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref MySNSTopic

  # --- SNS Topic ---
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref SNSTopicName
      TracingConfig: 'Active'

  PermissionForSNSInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DynamoLambda
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref MySNSTopic

  DynamoLambdaSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: PermissionForSNSInvokeLambda
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt DynamoLambda.Arn
      TopicArn: !Ref MySNSTopic

  # --- Lambda Dynamo: SNS -> DynamoDB ---
  DynamoLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/lambda_dynamo/
      Handler: app.lambda_handler
      Runtime: python3.12
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref MessagesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - AWSXRayDaemonWriteAccess

  # --- DynamoDB ---
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref MessagesTableName
      AttributeDefinitions:
        - AttributeName: MessageId
          AttributeType: S
      KeySchema:
        - AttributeName: MessageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # --- Lambda DDB to S3 ---
  DdbToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-DdbToS3Handler'
      Handler: app.lambda_handler
      Tracing: Active
      CodeUri: backend/src/handlers/lambda_ddb_to_s3/
      Timeout: 30
      Environment:
        Variables:
          S3_BUCKET: !Ref TargetBucket
      Events:
        DdbStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MessagesTable.StreamArn
            BatchSize: 1
            StartingPosition: LATEST
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MessagesTable
        - S3WritePolicy:
            BucketName: !Ref TargetBucket
        - AWSXRayDaemonWriteAccess

  # --- SNS Topic para eventos de S3 ---
  S3EventsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-S3Events"

  S3EventsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref S3EventsTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sns:Publish
            Resource: !Ref S3EventsTopic


  # --- S3 Bucket con notificación a SNS ---
  TargetBucket:
    Type: AWS::S3::Bucket
    DependsOn: S3EventsTopicPolicy
    Properties:
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:*"
            Topic: !Ref S3EventsTopic


  # --- Lambda que consume desde SNS y envía a Bedrock ---
  S3ToBedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/lambda_s3_to_bedrock/
      Handler: app.lambda_handler
      Runtime: python3.12
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          BEDROCK_MODEL: "anthropic.claude-v2"
      Policies:
        - Statement:
            Effect: Allow
            Action: s3:GetObject
            Resource: !Sub "${TargetBucket.Arn}/*"
        - Statement:
            Effect: Allow
            Action: bedrock:InvokeModel
            Resource: "*"
        - AWSXRayDaemonWriteAccess

  S3EventsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref S3EventsTopic
      Protocol: lambda
      Endpoint: !GetAtt S3ToBedrockFunction.Arn

  PermissionForSNSToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3ToBedrockFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref S3EventsTopic

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${MessageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/send"
  SNSTopicArn:
    Description: "SNS Topic ARN"
    Value: !Ref MySNSTopic
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref MessagesTable
  BucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref TargetBucket
