AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Messages betwen services using API Gateway, Lambda, SQS, EventBridge, SNS, DynamoDB and S3 with monitoring via CloudWatch and X-Ray

Globals:
  Function:
    Timeout: 10
    Runtime: python3.13
    Layers:
      - !Ref CommonDependenciesLayer
  Api:
    TracingEnabled: true

Resources:

  # --- Layer with dependencies ---
  CommonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.13

  # --- API Gateway with CORS ---
  MessageApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # --- Lambda message router queue: API -> SQS ---
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/message_router_queue/
      Handler: app.lambda_handler
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL: !Ref MessageQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MessageQueue.QueueName
        - AWSXRayDaemonWriteAccess
      Events:
        ApiPost:
          Type: Api
          Properties:
            Path: /send
            Method: post
            RestApiId: !Ref MessageApi

  # --- SQS Queue ---
  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MyMessageQueue

  # -- SQS 2 Nuevo Hugo y Hiram ---
  QueueTwoDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: message-router-queue-2-dlq

  QueueTwo:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: message-router-queue-2
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt QueueTwoDLQ.Arn
        maxReceiveCount: 5

  # --- Lambda EventBridge -> SQS 2 ---
  EBToSQS2Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/eb_to_sqs2/
      Handler: app.lambda_handler
      Runtime: python3.13
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueTwo
      Policies:
        - Statement:
            Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt QueueTwo.Arn
        - AWSXRayDaemonWriteAccess

  # --- Lambda: SQS2 -> Step Functions (poller) ---
  SQS2ToStepFn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/sqs2_to_stepfn/
      Handler: app.lambda_handler
      Runtime: python3.13
      Tracing: Active
      Environment:
        Variables:
          QUEUE_URL: !Ref QueueTwo
          STATE_MACHINE_ARN: arn:aws:states:us-east-1:633697719065:stateMachine:Map-batch-StateMachineHiram
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - Statement:
            - Effect: Allow
              Action: states:StartExecution
              Resource: arn:aws:states:us-east-1:633697719065:stateMachine:Map-batch-StateMachineHiram
      Events:
        FromSQS2:
          Type: SQS
          Properties:
            Queue: !GetAtt QueueTwo.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10

  # --- Lambda Dispatcher: SQS -> EventBridge ---
  LambdaDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/lambda_dispatcher/
      Handler: app.lambda_handler
      Runtime: python3.13
      Tracing: Active
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt MessageQueue.QueueName
        - Statement:
            Effect: Allow
            Action:
              - events:PutEvents
            Resource: "*"
        - AWSXRayDaemonWriteAccess
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt MessageQueue.Arn
            BatchSize: 1

  # --- EventBridge: Rule 1 -> SNS (+ Lambda EBToSQS2 como target) ---
  EventRuleToSNS:
    Type: AWS::Events::Rule
    Properties:
      Name: SendToSNSRule
      Description: "Regla de EventBridge que publica en SNS y Lambda EBToSQS2"
      EventPattern:
        source:
          - "MyApp"
          - "my.custom.source"
        detail-type:
          - "PlainText"
          - "MyEvent"
      Targets:
        - Arn: !Ref MySNSTopic
          Id: "SnsTarget"
        - Arn: !GetAtt EBToSQS2Function.Arn
          Id: "EBToSQS2LambdaTarget"

  # Policy that allows EventBridge to publish in SNS
  EventBridgeToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref MySNSTopic
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowEventBridgeToPublish
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref MySNSTopic

  # --- SNS Topic ---
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: MyTargetTopic
      TracingConfig: 'Active'

  # Permissions for SNS to invoke Lambda
  PermissionForSNSInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DynamoLambda
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref MySNSTopic

  # Permission for EventBridge to invoke Lambda (EBToSQS2)
  PermissionForEBInvokeEBToSQS2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EBToSQS2Function
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRuleToSNS.Arn

  # --- EventBridge: Regla 2 (eventos nativos de Step Functions) ---
  StepFnOutputsRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StepFnOutputsRule
      Description: "Captura cambios de estado del Step Functions (SUCCEEDED/FAILED) y los envía a SNS"
      EventPattern:
        source:
          - aws.states
        detail-type:
          - Step Functions Execution Status Change
        detail:
          stateMachineArn:
            - arn:aws:states:us-east-1:633697719065:stateMachine:Map-batch-StateMachineHiram
          status:
            - SUCCEEDED
            - FAILED
      Targets:
        - Arn: !Ref MySNSTopic
          Id: "SnsTargetForStepFnOutputs"

  # SNS subscription to Lambda
  DynamoLambdaSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: PermissionForSNSInvokeLambda
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt DynamoLambda.Arn
      TopicArn: !Ref MySNSTopic

  # --- Lambda Dynamo: SNS -> DynamoDB ---
  DynamoLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/lambda_dynamo/
      Handler: app.lambda_handler
      Runtime: python3.13
      Tracing: Active
      Environment:
        Variables:
          TABLE_NAME: !Ref MessagesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MessagesTable
        - AWSXRayDaemonWriteAccess

  # --- DynamoDB ---
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessagesTable
      AttributeDefinitions:
        - AttributeName: MessageId
          AttributeType: S
      KeySchema:
        - AttributeName: MessageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # --- Lambda DDB to S3: DynamoDB -> S3 ---
  DdbToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-DdbToS3Handler'
      Handler: app.lambda_handler
      Tracing: Active
      CodeUri: backend/src/handlers/lambda_ddb_to_s3/
      Timeout: 30
      Environment:
        Variables:
          S3_BUCKET: !Ref TargetBucket
      Events:
        DdbStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt MessagesTable.StreamArn
            BatchSize: 1
            StartingPosition: LATEST
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MessagesTable
        - S3WritePolicy:
            BucketName: !Ref TargetBucket
        - AWSXRayDaemonWriteAccess

  # --- S3 Bucket ---
  TargetBucket:
    Type: AWS::S3::Bucket

  # --- API Gateway para métricas ---
  MetricsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: MetricsStage
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,GET'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  # --- Lambda que expone métricas ---
  MetricsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: backend/src/handlers/lambda_metrics
      Handler: app.lambda_handler
      Runtime: python3.13
      Tracing: Active
      Policies:
        - CloudWatchReadOnlyAccess
        - AWSXRayDaemonWriteAccess
      Events:
        MetricsApiGet:
          Type: Api
          Properties:
            Path: /metrics
            Method: get
            RestApiId: !Ref MetricsApi

  # X-Ray resource policy para SNS
  XRayResourcePolicyForSNS:
    Type: AWS::XRay::ResourcePolicy
    Properties:
      PolicyName: !Sub "AllowSNSXRayPutTraceSegments-${AWS::StackName}"
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "SNSAccess",
              "Effect": "Allow",
              "Principal": { "Service": "sns.amazonaws.com" },
              "Action": [
                "xray:PutTraceSegments",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets"
              ],
              "Resource": "*",
              "Condition": {
                "StringEquals": { "aws:SourceAccount": "${AWS::AccountId}" },
                "StringLike": { "aws:SourceArn": "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*" }
              }
            }
          ]
        }

   # --- Dashboard ---
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-ServiceOverview"
      DashboardBody:
        !Sub
          - |
            {
                "widgets": [
                    {
                        "type": "metric",
                        "x": 6,
                        "y": 0,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "title": "SNS Messages Published",
                            "view": "gauge",
                            "region": "${Region}",
                            "period": 300,
                            "metrics": [
                                [ "AWS/SNS", "NumberOfMessagesPublished", "TopicName", "${MySNSTopicName}", { "stat": "Sum" } ]
                            ],
                            "yAxis": {
                                "left": {
                                    "min": 0,
                                    "max": 1000
                                }
                            }
                        }
                    },
                    {
                        "type": "metric",
                        "x": 0,
                        "y": 0,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "title": "S3 NumberOfObjects (TargetBucket)",
                            "view": "gauge",
                            "region": "${Region}",
                            "period": 86400,
                            "metrics": [
                                [ "AWS/S3", "NumberOfObjects", "BucketName", "${TargetBucket}", "StorageType", "AllStorageTypes", { "stat": "Average" } ]
                            ],
                            "yAxis": {
                                "left": {
                                    "min": 0,
                                    "max": 1000000
                                }
                            }
                        }
                    },
                    {
                        "type": "metric",
                        "x": 12,
                        "y": 6,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "title": "SQS Queue: visible / in-flight / sent",
                            "view": "timeSeries",
                            "region": "${Region}",
                            "period": 60,
                            "metrics": [
                                [ "AWS/SQS", "ApproximateNumberOfMessagesVisible", "QueueName", "${MessageQueue}", { "stat": "Average" } ],
                                [ "AWS/SQS", "ApproximateNumberOfMessagesNotVisible", "QueueName", "${MessageQueue}", { "stat": "Average" } ],
                                [ "AWS/SQS", "NumberOfMessagesSent", "QueueName", "${MessageQueue}", { "stat": "Sum" } ],
                                [ "AWS/SQS", "NumberOfMessagesReceived", "QueueName", "${MessageQueue}", { "stat": "Sum" } ]
                            ]
                        }
                    },
                    {
                        "type": "metric",
                        "x": 12,
                        "y": 0,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "title": "DynamoDB (MessagesTable): Consumed R/W & Throttles",
                            "view": "timeSeries",
                            "region": "${Region}",
                            "period": 60,
                            "metrics": [
                                [ "AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${MessagesTable}", { "stat": "Sum", "label": "read" } ],
                                [ "AWS/DynamoDB", "ConsumedWriteCapacityUnits", "TableName", "${MessagesTable}", { "stat": "Sum", "label": "write" } ],
                                [ "AWS/DynamoDB", "ThrottledRequests", "TableName", "${MessagesTable}", { "stat": "Sum", "label": "throttles" } ]
                            ]
                        }
                    },
                    {
                        "type": "metric",
                        "x": 0,
                        "y": 12,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "title": "Lambda Errors",
                            "view": "table",
                            "region": "${Region}",
                            "period": 60,
                            "metrics": [
                                [ "AWS/Lambda", "Errors", "FunctionName", "${ApiFunction}", { "stat": "Sum" } ],
                                [ "AWS/Lambda", "Errors", "FunctionName", "${LambdaDispatcher}", { "stat": "Sum" } ],
                                [ "AWS/Lambda", "Errors", "FunctionName", "${DynamoLambda}", { "stat": "Sum" } ],
                                [ "AWS/Lambda", "Errors", "FunctionName", "${DdbToS3Function}", { "stat": "Sum" } ]
                            ]
                        }
                    },
                    {
                        "type": "metric",
                        "x": 6,
                        "y": 6,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "title": "Lambda Concurrency",
                            "view": "gauge",
                            "region": "${Region}",
                            "period": 60,
                            "metrics": [
                                [ "AWS/Lambda", "ConcurrentExecutions", "FunctionName", "${ApiFunction}", { "stat": "Average" } ]
                            ],
                            "yAxis": {
                                "left": {
                                    "min": 0,
                                    "max": 100
                                }
                            }
                        }
                    },
                    {
                        "type": "metric",
                        "x": 0,
                        "y": 6,
                        "width": 6,
                        "height": 6,
                        "properties": {
                            "title": "Invocation distribution",
                            "view": "pie",
                            "region": "${Region}",
                            "period": 300,
                            "metrics": [
                                [ "AWS/Lambda", "Invocations", "FunctionName", "${ApiFunction}", { "stat": "Sum", "label": "api_router" } ],
                                [ "AWS/Lambda", "Invocations", "FunctionName", "${LambdaDispatcher}", { "stat": "Sum", "label": "dispatcher" } ],
                                [ "AWS/Lambda", "Invocations", "FunctionName", "${DynamoLambda}", { "stat": "Sum", "label": "dynamo_handler" } ],
                                [ "AWS/Lambda", "Invocations", "FunctionName", "${DdbToS3Function}", { "stat": "Sum", "label": "ddb_to_s3" } ]
                            ]
                        }
                    },
                    {
                        "type": "metric",
                        "x": 12,
                        "y": 12,
                        "width": 12,
                        "height": 6,
                        "properties": {
                            "title": "Lambda Errors & Duration",
                            "view": "timeSeries",
                            "region": "${Region}",
                            "period": 60,
                            "metrics": [
                                [ "AWS/Lambda", "Errors", "FunctionName", "${ApiFunction}", { "stat": "Sum", "label": "errors_api" } ],
                                [ "AWS/Lambda", "Duration", "FunctionName", "${ApiFunction}", { "stat": "Average", "label": "dur_api" } ]
                            ]
                        }
                    }
                ]
            }
          - {
              StackName: !Ref "AWS::StackName",
              Region: !Ref "AWS::Region",
              MessageApi: !Ref MessageApi,
              ApiFunction: !Ref ApiFunction,
              LambdaDispatcher: !Ref LambdaDispatcher,
              DynamoLambda: !Ref DynamoLambda,
              DdbToS3Function: !Ref DdbToS3Function,
              MessageQueue: !GetAtt MessageQueue.QueueName,
              MessagesTable: !Ref MessagesTable,
              MySNSTopicName: !Select [5, !Split [":", !Ref MySNSTopic]],
              TargetBucket: !Ref TargetBucket
            }


Outputs:
  ApiUrl:
    Description: "API Gateway endpoint"
    Value: !Sub "https://${MessageApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/send"
  SNSTopicArn:
    Description: "SNS Topic ARN"
    Value: !Ref MySNSTopic
  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref MessagesTable
  BucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref TargetBucket
  MetricsApiUrl:
    Description: "API Gateway endpoint para métricas"
    Value: !Sub "https://${MetricsApi}.execute-api.${AWS::Region}.amazonaws.com/MetricsStage/metrics"

