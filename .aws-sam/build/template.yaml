AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "SAM App: SNS \u2192 Lambda \u2192 DynamoDB \u2192 Lambda \u2192 S3\n"
Globals:
  Function:
    Timeout: 10
    Runtime: python3.12
Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ApiFunction
      Handler: app.lambda_handler
      Environment:
        Variables:
          QUEUE_URL:
            Ref: MessageQueue
      Policies:
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - MessageQueue
            - QueueName
      Events:
        ApiPost:
          Type: Api
          Properties:
            Path: /send
            Method: post
    Metadata:
      SamResourceId: ApiFunction
  MessageQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MyMessageQueue
  LambdaDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LambdaDispatcher
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
      - SQSPollerPolicy:
          QueueName:
            Fn::GetAtt:
            - MessageQueue
            - QueueName
      - Statement:
          Effect: Allow
          Action:
          - events:PutEvents
          Resource: '*'
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - MessageQueue
              - Arn
            BatchSize: 1
    Metadata:
      SamResourceId: LambdaDispatcher
  EventRuleToSNS:
    Type: AWS::Events::Rule
    Properties:
      Name: SendToSNSRule
      Description: Regla de EventBridge que publica en SNS
      EventPattern:
        source:
        - MyApp
        - my.custom.source
        detail-type:
        - PlainText
        - MyEvent
      Targets:
      - Arn:
          Ref: MySNSTopic
        Id: SnsTarget
  EventBridgeToSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
      - Ref: MySNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AllowEventBridgeToPublish
          Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sns:Publish
          Resource:
            Ref: MySNSTopic
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: MyTargetTopic
  PermissionForSNSInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: DynamoLambda
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: MySNSTopic
  DynamoLambdaSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: PermissionForSNSInvokeLambda
    Properties:
      Protocol: lambda
      Endpoint:
        Fn::GetAtt:
        - DynamoLambda
        - Arn
      TopicArn:
        Ref: MySNSTopic
  DynamoLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DynamoLambda
      Handler: app.lambda_handler
      Runtime: python3.12
      Environment:
        Variables:
          TABLE_NAME:
            Ref: MessagesTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MessagesTable
    Metadata:
      SamResourceId: DynamoLambda
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessagesTable
      AttributeDefinitions:
      - AttributeName: MessageId
        AttributeType: S
      KeySchema:
      - AttributeName: MessageId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  DdbToS3Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-DdbToS3Handler
      Handler: app.lambda_handler
      CodeUri: DdbToS3Function
      Timeout: 30
      Environment:
        Variables:
          S3_BUCKET:
            Ref: TargetBucket
      Events:
        DdbStream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - MessagesTable
              - StreamArn
            BatchSize: 1
            StartingPosition: LATEST
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MessagesTable
      - S3WritePolicy:
          BucketName:
            Ref: TargetBucket
    Metadata:
      SamResourceId: DdbToS3Function
  TargetBucket:
    Type: AWS::S3::Bucket
Outputs:
  ApiUrl:
    Description: API Gateway endpoint
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/send
  SNSTopicArn:
    Description: SNS Topic ARN
    Value:
      Ref: MySNSTopic
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value:
      Ref: MessagesTable
  BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: TargetBucket
